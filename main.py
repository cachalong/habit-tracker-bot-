import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask
import json
import time

TOKEN = '8238629742:AAGUzCWKz4WpR4f08-XRaij6uMHCKl-kX20'  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

user_habits = {}
habit_log = {}
reminders = {}
user_timezones = {}

DATA_FILE = "data.json"

def load_data():
    global user_habits, habit_log, reminders, user_timezones
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            user_habits = data.get("user_habits", {})
            habit_log = data.get("habit_log", {})
            reminders = data.get("reminders", {})
            user_timezones = data.get("user_timezones", {})
    except FileNotFoundError:
        user_habits = {}
        habit_log = {}
        reminders = {}
        user_timezones = {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump({
            "user_habits": user_habits,
            "habit_log": habit_log,
            "reminders": reminders,
            "user_timezones": user_timezones
        }, f, indent=4)

load_data()

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8000)

def keep_alive():
    t = Thread(target=run)
    t.start()

def get_user_habits(user_id):
    return user_habits.get(str(user_id), [])

def save_user_habit(user_id, habit):
    user_habits.setdefault(str(user_id), [])
    if habit not in user_habits[str(user_id)]:
        user_habits[str(user_id)].append(habit)

def remove_user_habit(user_id, habit):
    uid = str(user_id)
    if uid in user_habits and habit in user_habits[uid]:
        user_habits[uid].remove(habit)
    if uid in reminders and habit in reminders[uid]:
        del reminders[uid][habit]

def mark_habit_done(user_id, habit):
    uid = str(user_id)
    habit_log.setdefault(uid, {})
    now = datetime.utcnow() + timedelta(hours=user_timezones.get(uid, 0))
    key = f"{habit}_{now.date().isoformat()}"
    habit_log[uid][key] = True

def is_habit_done(user_id, habit, day=None):
    uid = str(user_id)
    if day is None:
        now = datetime.utcnow() + timedelta(hours=user_timezones.get(uid, 0))
        day = now.date().isoformat()
    key = f"{habit}_{day}"
    return habit_log.get(uid, {}).get(key, False)

def add_reminder(user_id, habit, time_str):
    uid = str(user_id)
    reminders.setdefault(uid, {})
    reminders[uid].setdefault(habit, [])
    if time_str not in reminders[uid][habit]:
        reminders[uid][habit].append(time_str)

def remove_reminder(user_id, habit, time_str):
    uid = str(user_id)
    if uid in reminders and habit in reminders[uid] and time_str in reminders[uid][habit]:
        reminders[uid][habit].remove(time_str)
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, —É–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ reminders
        if not reminders[uid][habit]:
            del reminders[uid][habit]

def main_menu_markup():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_menu"),
        InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="mark"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="delete"),
        InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="remind"),
        InlineKeyboardButton("üåç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone"),
    )
    return markup

preset_habits = ["–ü–∏—Ç—å –≤–æ–¥—É", "–ë–µ–≥", "–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏", "–°–ø–æ—Ä—Ç"]

@bot.message_handler(commands=['start', 'menu'])
def send_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "add_menu")
def add_menu(call):
    markup = InlineKeyboardMarkup()
    for habit in preset_habits:
        markup.add(InlineKeyboardButton(habit, callback_data=f"add_{habit}"))
    markup.add(InlineKeyboardButton("–°–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞", callback_data="add_custom"))
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "add_custom")
def add_custom_habit_start(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–∏–≤—ã—á–∫–∏:")
    bot.register_next_step_handler(msg, save_custom_habit)

def save_custom_habit(message):
    habit = message.text.strip()
    if habit == "":
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ /menu")
        return
    save_user_habit(message.chat.id, habit)
    save_data()
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    bot.send_message(message.chat.id, "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_"))
def add_habit(call):
    habit = call.data[4:]
    save_user_habit(call.message.chat.id, habit)
    save_data()
    bot.answer_callback_query(call.id, f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    bot.edit_message_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!", call.message.chat.id, call.message.message_id, reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def cancel_action(call):
    bot.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id, reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "delete")
def delete_habit_start(call):
    habits = get_user_habits(call.message.chat.id)
    if not habits:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    markup = InlineKeyboardMarkup()
    for h in habits:
        markup.add(InlineKeyboardButton(h, callback_data=f"delete_{h}"))
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_habit_confirm(call):
    habit = call.data[len("delete_"):]
    remove_user_habit(call.message.chat.id, habit)
    save_data()
    bot.answer_callback_query(call.id, f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª —É–¥–∞–ª–µ–Ω–∞.")
    bot.edit_message_text("–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", call.message.chat.id, call.message.message_id, reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "mark")
def mark_habit_start(call):
    habits = get_user_habits(call.message.chat.id)
    if not habits:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
        return
    markup = InlineKeyboardMarkup()
    for h in habits:
        markup.add(InlineKeyboardButton(h, callback_data=f"mark_{h}"))
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_"))
def mark_habit_done_callback(call):
    habit = call.data[len("mark_"):]
    mark_habit_done(call.message.chat.id, habit)
    save_data()
    bot.answer_callback_query(call.id, f"–û—Ç–º–µ—Ç–∏–ª –ø—Ä–∏–≤—ã—á–∫—É ¬´{habit}¬ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    bot.edit_message_text(f"–û—Ç–º–µ—Ç–∏–ª –ø—Ä–∏–≤—ã—á–∫—É ¬´{habit}¬ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è.", call.message.chat.id, call.message.message_id, reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "stats")
def show_stats_menu(call):
    markup = InlineKeyboardMarkup(row_width=3)
    markup.add(
        InlineKeyboardButton("–ó–∞ –¥–µ–Ω—å", callback_data="stats_day"),
        InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week"),
        InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel")
    )
    bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("stats_"))
def show_stats(call):
    user_id = str(call.message.chat.id)
    period = call.data[len("stats_"):]
    habits = get_user_habits(user_id)
    if not habits:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    now = datetime.utcnow() + timedelta(hours=user_timezones.get(user_id, 0))

    def daterange(start_date, end_date):
        for n in range(int((end_date - start_date).days) + 1):
            yield start_date + timedelta(n)

    if period == "day":
        start_date = now.date()
    elif period == "week":
        start_date = now.date() - timedelta(days=now.weekday())  # –ü–Ω —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
    elif period == "month":
        start_date = now.date().replace(day=1)
    else:
        start_date = now.date()

    end_date = now.date()

    result = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:\n"
    for h in habits:
        done_count = 0
        total_days = 0
        for single_date in daterange(start_date, end_date):
            day_str = single_date.isoformat()
            total_days += 1
            if is_habit_done(user_id, h, day_str):
                done_count += 1
        percent = int(done_count / total_days * 100) if total_days > 0 else 0
        result += f"{h}: {done_count}/{total_days} ({percent}%)\n"

    bot.edit_message_text(result, call.message.chat.id, call.message.message_id, reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "remind")
def remind_start(call):
    habits = get_user_habits(call.message.chat.id)
    if not habits:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    markup = InlineKeyboardMarkup()
    for h in habits:
        markup.add(InlineKeyboardButton(h, callback_data=f"remind_{h}"))
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remind_") and ("|" not in call.data))
def remind_time_menu(call):
    habit = call.data[len("remind_"):]
    bot.answer_callback_query(call.id)
    user_id = str(call.message.chat.id)
    times = reminders.get(user_id, {}).get(habit, [])
    markup = InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for t in times:
        markup.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {t}", callback_data=f"remind_del|{habit}|{t}"))
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è", callback_data=f"remind_add|{habit}"))
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="remind"))
    bot.edit_message_text(f"–¢–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ¬´{habit}¬ª:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remind_del|"))
def delete_reminder_callback(call):
    _, habit, time_str = call.data.split("|")
    user_id = call.message.chat.id
    remove_reminder(user_id, habit, time_str)
    save_data()
    bot.answer_callback_query(call.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {time_str} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ ¬´{habit}¬ª.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    remind_time_menu(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remind_add|"))
def add_reminder_callback(call):
    habit = call.data[len("remind_add|"):]
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id,
        f"–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ ¬´{habit}¬ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):")
    bot.register_next_step_handler(msg, process_time_input, habit)

def process_time_input(message, habit):
    time_str = message.text.strip()
    try:
        datetime.strptime(time_str, "%H:%M")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /menu")
        return
    add_reminder(message.chat.id, habit, time_str)
    save_data()
    bot.send_message(message.chat.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ¬´{habit}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.")
    bot.send_message(message.chat.id, "–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data == "set_timezone")
def set_timezone_start(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç UTC –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, +3 –∏–ª–∏ -1):")
    bot.register_next_step_handler(msg, process_timezone)

def process_timezone(message):
    tz_text = message.text.strip()
    try:
        tz_offset = int(tz_text)
        user_timezones[str(message.chat.id)] = tz_offset
        save_data()
        bot.send_message(message.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: UTC{tz_offset:+d}")
    except:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä +3 –∏–ª–∏ -1")

def cancel(call):
    bot.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id, reply_markup=main_menu_markup())

bot.callback_query_handler(func=lambda call: call.data == "cancel")(cancel)

def reminder_checker():
    while True:
        now_utc = datetime.utcnow()
        for user_id, habits_dict in reminders.items():
            try:
                tz_offset = user_timezones.get(user_id, 0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC+0
                now_local = now_utc + timedelta(hours=tz_offset)
                current_time = now_local.strftime("%H:%M")
                for habit, times in habits_dict.items():
                    if current_time in times:
                        bot.send_message(int(user_id), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ¬´{habit}¬ª!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")
        time.sleep(60)

keep_alive()
Thread(target=reminder_checker, daemon=True).start()

bot.infinity_polling()
